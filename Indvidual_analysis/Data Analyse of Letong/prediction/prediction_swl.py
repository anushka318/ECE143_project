# -*- coding: utf-8 -*-
"""prediction-SWL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v3QFN34SdZ4OkwWpE-Uug6jNCVZMnA4Z
"""

# Commented out IPython magic to ensure Python compatibility.
# This mounts your Google Drive to the Colab VM.
from google.colab import drive
drive.mount('/content/drive')

FOLDERNAME = 'ece143/'
assert FOLDERNAME is not None, "[!] Enter the foldername."

# Now that we've mounted your Drive, this ensures that
# the Python interpreter of the Colab VM can load
# python files from within it.
import sys
sys.path.append('/content/drive/My Drive/{}'.format(FOLDERNAME))

# This is later used to use the IMDB reviews
# %cd /content/drive/My\ Drive/$FOLDERNAME/

"""# import"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.tree import plot_tree
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

data = pd.read_csv('cleaned_data.csv', encoding='ISO-8859-1')
data.head()

df = data.copy()

df = df[['Gender', 'Age', 'Work', 'Degree', 'Residence', 'Platform', 'earnings', 'whyplay', 'League', 'Reference', 'Playstyle',
                   'Game', 'Hours', 'Narcissism',
                   'GAD1', 'GAD2', 'GAD3', 'GAD4', 'GAD5', 'GAD6', 'GAD7', 'GADE',
                   'SWL1', 'SWL2', 'SWL3', 'SWL4', 'SWL5',
                   'SPIN1', 'SPIN2', 'SPIN3', 'SPIN4', 'SPIN5', 'SPIN6', 'SPIN7', 'SPIN8', 'SPIN9', 'SPIN10', 'SPIN11', 'SPIN12', 'SPIN13', 'SPIN14', 'SPIN15', 'SPIN16', 'SPIN17',
                   'GAD_T', 'SWL_T', 'SPIN_T'
                  ]]

"""# SWL
* 5-9 points: Extremely dissastered
* 10-14 points: dissastered
* 15-19 points: Slightly dissastered
* 20 points: Neutral
* 21-25 points: Slightly satisfied
* 26-30 points: Satisfied
* 31-35 points: Extremely satisfied
"""

group_counts = data.groupby(pd.cut(data['SWL_T'], bins=[4, 9, 14, 19, 20, 25, 30, 35], labels=["Extremely dissastered",
     "dissastered",
     "Slightly dissastered",
     "Neutral",
     "Slightly satisfied",
     "Satisfied",
     "Extremely satisfied"]))['SWL_T'].count()

group_counts.plot(kind='bar')

plt.xlabel("SWLS")
plt.ylabel("Counts")
plt.title("Bar of SWL")
plt.show()

data['SWL_T'] = pd.cut(
     data['SWL_T'],
     bins=[4, 9, 14, 19, 20, 25, 30, 35],
     labels=["Extremely dissastered",
     "dissastered",
     "Slightly dissastered",
     "Neutral",
     "Slightly satisfied",
     "Satisfied",
     "Extremely satisfied"]
 ).astype(str)

"""# SWL DecisionTreeClassifier"""

label_encoder = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

df.head()

X_SWL = df.drop(columns=["GAD_T", "SWL_T", "SPIN_T"])
y_SWL = df['SWL_T']

X_train, X_test, y_train, y_test = train_test_split(X_SWL, y_SWL, random_state=42, test_size=0.2)

dtc = DecisionTreeClassifier(random_state=42, max_depth=10)
model = dtc.fit(X_train, y_train)

y_pred = model.predict(X_test)

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

from tabulate import tabulate

features = pd.DataFrame(dtc.feature_importances_, index=X_SWL.columns, columns=['Importance'])
top_10_features = features.nlargest(10, 'Importance')

table_str = tabulate(top_10_features, headers=["Top 10 Features", "Importance"], tablefmt="grid")

table_lines = table_str.split("\n")
print("\n".join(table_lines))

"""# SWL DecisionTreeRegressor"""

X_SWL2 = df.iloc[:, :44]
y_SWL2 = df['SWL_T']

X_train, X_test, y_train, y_test = train_test_split(X_SWL2, y_SWL2, random_state=42, test_size=0.2)

dtr = DecisionTreeRegressor(random_state=42, max_depth=5)
model2 = dtr.fit(X_train, y_train)

y_pred2 = model2.predict(X_test)

mean_absolute_error(y_pred2, y_test)

mean_squared_error(y_pred2, y_test)

r2_score(y_pred2, y_test)