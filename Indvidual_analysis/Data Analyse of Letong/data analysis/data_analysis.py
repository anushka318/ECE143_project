# -*- coding: utf-8 -*-
"""data analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zqirPL67eukCCfc6uaTIj7EXrhsDKKGZ
"""

# Commented out IPython magic to ensure Python compatibility.
# This mounts your Google Drive to the Colab VM.
from google.colab import drive
drive.mount('/content/drive')


FOLDERNAME = 'ece143/'
assert FOLDERNAME is not None, "[!] Enter the foldername."

# Now that we've mounted your Drive, this ensures that
# the Python interpreter of the Colab VM can load
# python files from within it.
import sys
sys.path.append('/content/drive/My Drive/{}'.format(FOLDERNAME))

# This is later used to use the IMDB reviews
# %cd /content/drive/My\ Drive/$FOLDERNAME/

import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns

current_directory = os.getcwd()
print(current_directory)
df = pd.read_csv('./cleaned_data.csv', encoding = 'ISO-8859-1')

"""Line plot Anxities vs hours played , watched"""

import matplotlib.pyplot as plt
import seaborn as sns

game_label = ['SPIN_T', 'SWL_T', 'GAD_T']

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for i, col in enumerate(game_label):
    # Use sns.kdeplot to plot the joint density plot
    sns.kdeplot(x=df[col], y=df['Hours'], fill=True, ax=axes[i], cmap='Blues')

    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Hours')
    axes[i].set_title(f'{col} vs Playing Hours')

# Adjust the layout to prevent overlap
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

game_label = ['SPIN_T', 'SWL_T', 'GAD_T']

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for i, col in enumerate(game_label):
    # Use sns.kdeplot to plot the joint density plot
    sns.kdeplot(x=df[col], y=df['streams'], fill=True, ax=axes[i], cmap='Blues')

    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Streams')
    axes[i].set_title(f'{col} vs Watching Hours')

# Adjust the layout to prevent overlap
plt.tight_layout()
plt.show()

"""Playstle"""

plt.figure(figsize=(3,3))
myexplode = [0,0,0,0,0.1]
df.Playstyle.value_counts().head(5).plot(kind = 'pie' , autopct='%1.1f%%' , pctdistance=0.5 , explode=myexplode )
plt.title("Playstyle")
plt.show()

label = ['SPIN_T','SWL_T','GAD_T']
fig, axes = plt.subplots(1,len(label),figsize = (10,5))
fig.suptitle("Playstyle vs Anxiety and Satisfaction with their life")
for i, col in enumerate(label):
    axes[i].bar(df['Playstyle'],df[col], data=df,color = 'darkmagenta')
    axes[i].set_xticklabels(axes[i].get_xticklabels(), rotation=90)
    axes[i].set_ylabel(col)
    axes[i].set_title(f'Playstyle vs {col}')
plt.tight_layout()
plt.show()

"""Generalized Anxiety (GADE)"""

plt.figure(figsize=(3,3))
myexplode = [0,0,0,0.1]
df.GADE.value_counts().head(5).plot(kind = 'pie' , autopct='%1.1f%%' , pctdistance=0.5 , explode=myexplode )
plt.title("Generalized anxiety")
plt.show()

"""Generalized Anxiety Disorder Examination (Total Score) vs Anxiety, Satisfaction of Life


"""

label = ['SPIN_T','SWL_T','GAD_T']
fig, axes = plt.subplots(1,len(label),figsize = (10,5))
fig.suptitle("People who give Generalized Anxiety Disorder Examination and how anxiety they are, how much they satisfied with their life")
for i, col in enumerate(label):
    axes[i].bar(df['GADE'],df[col], data=df,color = 'green')
    axes[i].set_xticklabels(axes[i].get_xticklabels(), rotation=60)
    axes[i].set_ylabel(col)
    axes[i].set_title(f'GADE vs {col}')
plt.tight_layout()
plt.show()

"""Game played vs Anxiety"""

fig, axes = plt.subplots(1, 3, figsize=(20, 5) )
fig.suptitle('Game played vs Anxiety')
labels = ['SPIN_T', 'GAD_T' , 'SWL_T']

for count, ele in enumerate(labels):
    df.groupby('Game')[ele].mean().sort_values(ascending=False).plot(kind='bar' , ax = axes[count])
    axes[count].set_title(f"Game played vs {ele}")

"""Degree vs Anxiety"""

label = ['SPIN_T','SWL_T','GAD_T']
fig, axes = plt.subplots(1,len(label),figsize = (10,4))
for i, col in enumerate(label):
    sns.barplot(x='Degree', y=col, data=df, ax=axes[i])
    axes[i].set_xticklabels(axes[i].get_xticklabels(), rotation=90)
    axes[i].set_ylabel(col)
    axes[i].set_title(f'Degree vs {col}')
plt.tight_layout()
plt.show()

"""GAD_T : Total Score for Generalized Anxiety Disorder

SWL_T : Total Score for Satisfaction With Life

SPIN_T : Total Score for Social Phobia Inventory
"""

plt.figure(figsize=(5,3))  # Increase figure size for better readability

# Define the variables you want to plot
variables = ['SWL_T', 'SPIN_T', 'GAD_T']
colors = ['b', 'g', 'r']  # Different colors for distinction

# Loop through each variable and plot it
for var, color in zip(variables, colors):
    df.groupby('Age')[var].mean().plot(label=var, color=color)

# Add title, labels, and legend
plt.title("Age vs Anxiety and Satisfaction with Life")
plt.xlabel("Age")
plt.ylabel("Score")
plt.legend()  # Show legend to differentiate lines

plt.show()

label = ['SPIN_T','SWL_T','GAD_T']
fig, axes = plt.subplots(1,len(label),figsize = (10,5))
fig.suptitle("Work vs Anxiety and Satisfaction with their life")
for i, col in enumerate(label):
    axes[i].bar(df['Work'],df[col], data=df,color = 'plum')
    axes[i].set_xticklabels(axes[i].get_xticklabels(), rotation=90)
    axes[i].set_ylabel(col)
    axes[i].set_title(f'Work vs {col}')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,7))
df.groupby('League')['Hours'].mean().sort_values(ascending=False).plot(kind='bar')
plt.title("League vs Hours")
plt.xlabel("League")
plt.ylabel("Average Hours")
plt.show()

plt.figure(figsize=(3,3))
df.groupby('GAD_T')['SPIN_T'].mean().plot()
plt.title("GAD_T vs SPIN_T")
plt.xlabel("GAD_Total")
plt.ylabel("SPIN_Total")
plt.show()

plt.figure(figsize=(3,3))
df.groupby('SWL_T')['SPIN_T'].mean().plot()
plt.title("SWL_T vs SPIN_T")
plt.xlabel("SWL_Total")
plt.ylabel("SPIN_Total")
plt.show()